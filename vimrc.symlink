call plug#begin('~/.vim/plugged')
Plug '~/.fzf'
Plug 'junegunn/fzf.vim'                             " fzf wrapper for Vim
Plug 'rafi/awesome-vim-colorschemes'                " Collection of awesome color schemes for Vim
Plug 'tomtom/tcomment_vim'                          " Provides easy to use, file-type sensible comments
Plug 'tpope/vim-vinegar'                            " Filesystem project drawer, press - to open
Plug 'tpope/vim-fugitive'                           " Git wrapper, supports commands like :Gedit
Plug 'sheerun/vim-polyglot'                         " A collection of language packs for Vim
Plug 'mhinz/vim-startify'                           " Start screen for Vim
Plug 'rbong/vim-crystalline'                        " Status line
call plug#end()

" Leave the past behind
set nocompatible

" Disable auto-execution of code in sandbox
set nomodeline

" True color support
set termguicolors

" Color scheme
colorscheme gruvbox
set background=dark

" Set leader
let mapleader="\<Space>"
let maplocalleader="\\"

" Make copy operations work with the clipboard
set clipboard=unnamed

" Open new split panes to right and bottom, which feels more natural than Vimâ€™s default
set splitbelow
set splitright

" Disable auto matching parens
let g:loaded_matchparen=1

" Don't render special chars (tabs, trails, ...)
set nolist

" Lazy drawing
set lazyredraw
set ttyfast

" Crystalline {{{
function! StatusLine(current)
  return (a:current ? crystalline#mode() . '%#Crystalline#' : '%#CrystallineInactive#')
        \ . ' %f%h%w%m%r '
        \ . (a:current ? '%#CrystallineFill# %{fugitive#head()} ' : '')
        \ . '%=' . (a:current ? '%#Crystalline# %{&paste?"PASTE ":""}%{&spell?"SPELL ":""}' . crystalline#mode_color() : '')
        \ . ' %{&ft}[%{&enc}][%{&ffs}] %l/%L %3(%c%V%) %P '
endfunction

let g:crystalline_statusline_fn = 'StatusLine'
let g:crystalline_theme = 'gruvbox'

set laststatus=2
" }}}

" Startify {{{
" Don't change to the file's directory
let g:startify_change_to_dir = 0
" Disable random quotes header
let g:startify_custom_header = []
" Don't split when opening a file
autocmd User Startified setlocal buftype=
" }}}

" fzf {{{
set rtp+=~/.fzf

" Set environment variable
" let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'

 " Open fzf Files
nnoremap <C-p> :Files<Cr>

" }}}

" ripgrep {{{
if executable('rg')
  set grepprg=rg\ --vimgrep

  " fzf ripgrep
  command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
    \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
    \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
    \   <bang>0)

  nnoremap <C-g> :Rg<Cr>
endif
" "}}}

" Built-in settings
" ===========================================================================

" Substitution {{{
if exists('&inccommand')
  set inccommand=nosplit
endif
" }}}

" Search {{{
set hlsearch                " highlight all results
set incsearch               " but do highlight as you type your search.
set ignorecase              " make searches case-insensitive...
set smartcase               " ... unless they contain at least one capital letter
set gdefault                " have :s///g flag by default on"
" }}}

" Guides {{{
set relativenumber                                          " show line numbers
set nu rnu

nnoremap <silent> <C-n> :set relativenumber!<CR>

autocmd BufNewFile,BufRead *.js set colorcolumn=80  " ruler at 80 chars width for js files
set history=200                                     " remember a lot of stuff
set ruler                                           " Always show info along bottom.
" }}}

" Files {{{
set autoread                " auto-reload files changed on disk
set updatecount=0           " disable swap files
set nobackup
set noswapfile

" enable functional autosave
augroup autoSaveAndRead
    autocmd!
    autocmd TextChanged,InsertLeave,FocusLost * silent! wall
    autocmd CursorHold * silent! checktime
augroup END
" }}}

" Persistent undo {{{
set undodir=/tmp/vim/undo
set hidden                  " Don't unload hidden buffers
set undofile                " Save undos to file
set undolevels=1000
set undoreload=10000

" Create undo directory if it's missing
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
" }}}

" Indentation {{{
set cindent                 " auto-indent braces
set autoindent              " auto-indent
set tabstop=2               " tab spacing
set softtabstop=2           " unify
set shiftwidth=2            " indent/outdent by 2 columns
set shiftround              " always indent/outdent to the nearest tabstop
set expandtab               " use spaces instead of tabs
set smarttab                " use tabs at the start of a line, spaces elsewherei
set nowrap                  " don't wrap long lines
" }}}

" Code folding {{{
set foldmarker={{{,}}}
set foldenable              " enable folding
set foldmethod=marker
set foldnestmax=10          " maximum nesting of folds
set foldlevelstart=0        " folds start off closed
set foldlevel=0
" }}}

" Compilation {{{
autocmd FileType ruby map <F9> :w<CR>:!rubocop %<CR>
autocmd FileType javascript map <F9> :w<CR>:!eslint %<CR>
" }}}

" Netrw {{{
" 0: One file per line
" 1: One file per line with file size and time stamp
" 2: Files in columns
" 3: Tree
let g:netrw_liststyle=1
let g:netrw_localrmdir="rm -r" " Allow removal of directories that aren't empty
let g:netrw_altv=1            " Split to the right
" }}}

" Omnifunc {{{
filetype plugin on
set omnifunc=syntaxcomplete#Complete
" }}}

" Miscellaneous {{{

" Disable arrow keys
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Map h j k l to Ctrl+w+h j k l
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Force syntax sync
nnoremap <silent> <leader>s :syntax sync fromstart<CR>

autocmd FileType vue syntax sync fromstart
autocmd FileType markdown syntax sync fromstart

" Don't lose selection when shifting left or right
xnoremap <  <gv
xnoremap >  >gv

" Move to beginning and end of line
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L g_

" Trim trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" Format JSON
com! FormatJSON %!python -m json.tool

" Auto-create parent directories when expanding file
" Ref: http://stackoverflow.com/a/4294176/517528
function! s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Close preview window after completion is done
" Automatically close scratch window when finishing a completion or leaving
" insert mode
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

" Automatically equalize splits when Vim is resized
autocmd VimResized * wincmd =
" }}}
